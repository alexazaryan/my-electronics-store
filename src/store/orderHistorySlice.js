// —Å–ª–∞–π—Å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { collection, getDocs, query, orderBy } from "firebase/firestore";
import { db } from "../utils/firebase"; // –∏–º–ø–æ—Ä—Ç Firestore

// –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const fetchUserOrders = createAsyncThunk(
   "orderHistory/fetchUserOrders",
   async (userId) => {
      const ordersRef = collection(db, "users", userId, "orders"); // –ø—É—Ç—å –∫ –∑–∞–∫–∞–∑–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const q = query(ordersRef, orderBy("createdAt", "desc")); // —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
      const snapshot = await getDocs(q); // –ø–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
      return snapshot.docs.map((doc) => {
         const data = doc.data();

         return {
            id: doc.id,
            ...data,
            createdAt: data.createdAt
               ? data.createdAt.toDate().toISOString()
               : null, // üî• —Ñ–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
         };
      });
   }
);

const orderHistorySlice = createSlice({
   name: "orderHistory",
   initialState: {
      orders: [], // —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
      loading: false, // —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
   },
   reducers: {
      clearOrders: (state) => {
         state.orders = []; // –æ—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
      },
   },
   extraReducers: (builder) => {
      builder
         .addCase(fetchUserOrders.pending, (state) => {
            state.loading = true; // –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
         })
         .addCase(fetchUserOrders.fulfilled, (state, action) => {
            state.orders = action.payload; // –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
            state.loading = false;
         })
         .addCase(fetchUserOrders.rejected, (state) => {
            state.loading = false; // –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
         });
   },
});

export const { clearOrders } = orderHistorySlice.actions;
export default orderHistorySlice.reducer;
